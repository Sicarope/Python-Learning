    <파이썬 기초문법 1>
    : 파이썬은 인터프리터 언어다. Shell에서 한줄 한줄씩 코드가 실행되는 것을 볼 수가 있다.


    print('안녕 세상아')
     - 파이썬은 기본적으로 세미콜론을 적을 필요가 없다.
 
    print('안녕'); print('세상아')
    - 명령문을 한줄에 실행하고 싶다면 세미콜른을 붙이면 된다.
    
    # 주석처리는 샵을 붙이면 된다. 자바와는 다르게 /* ~ */로 코드 전체를 주석처리 했던것처럼, 파이썬에는 그런 기능이 없다. 그냥 코드 앞에만 #을 붙이면 된다.


    5 / 2
    - 나누기는 / 를 사용한다. 값은 2.5가 나온다.
    5 // 2
    - 몫만 나오고 싶다면 // 를 사용한다. 값은 2가 나온다.
    5 % 2
    - 나머지를 구하고 싶다면 % 를 사용한다. 값은 1이 나온다.
    2 ** 10
    - 거듭제곱은 ** 을 사용한다. 값은 1024가 나온다.


    * 구분해두기: '4 / 2' 와 '4 // 2'와 '4 // 2.0' 의 차이는?
    4 / 2는 일반적인 나누기로 값이 실수로 나온다. 값은 2.0 이다.
    4 // 2는 소수점 이하를 버리기 때문에 값이 정수로 나온다. 값은 2다.
    4 // 2.0은 위의 사항과 똑같지만 계산 과정에 실수가 있으므로 결과가 실수로 나온다. 값은 2.0 이다.

    '5.5 // 2' 와 '4.1 // 2.1' 처럼, 나누는 것이나 나눠지는 것 중 하나라도 실수가 있다면 값이 실수로 나온다. (각각 값은 2.0, 1.0 이다.) 
    
    
    * 알아두기: 몫과 나머지를 함께 구하고 싶다면?
    divmod(나눠지는 수, 나누는 수) -> ex) divmod(5, 2)
    결과는 (2, 1) 차례대로 몫과 나머지가 나온다.
    
    
    <객체의 자료형 알아보기>
    type(5.5)
    - 객체의 자료형을 알고 싶으면 type()을 사용한다. 결과는 'float' 이 나온다.
    
    
    <변수 삭제하기>
    x = 10
    del x 혹은 del (x)
    - 변수를 삭제하고 싶으면 del을 사용한다.


    <입력처리 input>
    x = input(문자열 입력: )
    >> 문자열 입력: what
    type(x) -> 'str'으로 나온다. input() 함수는 한 번에 하나씩, 문자열로 저장을 한다.
    만약 정수로 저장을 하고 싶다면, 앞에 int를 씌어주면 된다.     x = int(input(정수 하나 입력)) << 이런식으로..
    
    
    <입력받은 것을 동시에 두 개 저장하기>
    split(). 함수를 사용한다. 이때 공백을 기준으로 두 변수가 저장된다.
    a, b = input("문자열 두개를 입력하세요: ").split()
    >> 문자열 두개를 입력하세요: 비가 온다
    print(c, d) -> 비가 온다. 으로 출력된다.
    
    만약 콤마를 기준으로 두 변수를 저장하고 싶다면, split(',')으로 하면 된다.
    정수형 변환, 입력처리, 공백처리 세 가지를 모두 하고 싶다면 map(int, input().split()) 라고 작성하면 된다.
    
    
    <값 사이에 문자넣기>
    sep(seperator, 구분자)를 사용한다.
    가령 콤마를 사용하고 싶다면..    print(1, 2, 3, sep=',')  -> 1, 2, 3 라고 출력된다.
    가령 공백을 사용하고 싶다면..    print(1, 2, 3, sep=' ')  -> 1 2 3 라고 출력된다.
    줄바꿈으로 출력을 하고 싶다면...  print(1, 2, 3, sep='\n')  -> 1
                                                                 2
                                                                 3 라고 출력된다.
                                                                 
                                                                 
    <한줄로 주르륵 출력하기>
    end 함수를 사용한다.
    print(1, end='')
    print(2, end='')
    print(3)    -> 123
    print 함수는 기본적으로 end에 \n이 저장되어 있기 때문에, 공백 없이 지정해주면 주르륵 나온다.
    가령 end에 ' '라고 공백을 하나 지정해주면, 값은 1 2 3 이 나올것이다.
    
